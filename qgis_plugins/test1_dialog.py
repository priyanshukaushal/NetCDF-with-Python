# -*- coding: utf-8 -*-
"""
/***************************************************************************
 test1Dialog
                                 A QGIS plugin
 test1
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-01-20
        git sha              : $Format:%H$
        copyright            : (C) 2022 by priyanshu
        email                : priyanshukaushal.bt19cse@pec.edu.in
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import pandas as pd
import numpy as np
from netCDF4 import Dataset
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'test1_dialog_base.ui'))


class test1Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(test1Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.SubmitButton.clicked.connect(self.plotNetcdfData)
    
    def plotNetcdfData(self):
        if(self.PathToFileInput.text().strip()):
            raw_path = r'{}'.format(self.PathToFileInput.text().strip())
            data = Dataset(raw_path, "r")
            lon_data = data.variables['lon'][:]
            lat_data = data.variables['lat'][:]
            time_data = data.variables['time'][:]
            tave = data.variables['tave'][:]
            mp = Basemap(projection='merc', llcrnrlat=-1.93805556, llcrnrlon=55.43444444, urcrnrlat=40.38888889, urcrnrlon=106.42694444, resolution='i')
            lon, lat = np.meshgrid(lon_data, lat_data)
            x, y = mp(lon, lat)

            i = 0
            c_scheme = mp.pcolor(x, y, np.squeeze(tave[i,:,:]), cmap = 'jet')
            c_bar = mp.colorbar(c_scheme, location='bottom', pad='20%')
            mp.drawcoastlines()
            mp.drawstates()
            mp.drawcountries()
            plt.title("Average Temperature on day " + str(i+1) + " of 1961")
            plt.show()
